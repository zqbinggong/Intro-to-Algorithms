
public class QuickSort {
	//////////////////////////////////////////////////////////////////////////////////////
	//原始版本
	//快速排序
	public static void quickSort(int[] arr, int p, int r){
		if(p < r){
			int q = partition(arr,p,r);
			quickSort(arr, p, q-1);
			quickSort(arr, q+1,r);
		}
	}
	//分部
	private static int partition(int[] arr, int p, int r) {
		// TODO Auto-generated method stub
		int x = arr[r];
		int i = p - 1;
		for(int j = p; j <= r-1; j++){
			if(arr[j] <= x){
				swap(arr,++i,j);
			}
		}
		swap(arr,i+1,r);
		return i+1;
	}

	private static void swap(int[] arr, int i, int j) {
		// TODO Auto-generated method stub
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
	
	//////////////////////////////////////////////////////////////////////////////////////
	//习题7-2,针对相同元素的快速排序
	int[] id; //用来存储下标
	public static void quickSortSame(int[] arr, int p, int r){
		if(p < r){
			id = partitionSame(arr,p,r);
			quickSort(arr, p, id[0]-1);
			quickSort(arr, id[1]+1,r);
		}
	}
	private static int[] partitionSame(int[] arr, int p, int r) {
		// TODO Auto-generated method stub
		int[] index = new int[2];
		int i = partition(arr, p, r);
		int j = i;
		while(i > 0 && arr[i-1] == arr[i])
			i--;
		while(j < r-1 && arr[j+1] == arr[j])
			j++;
		index[0] = i;
		index[1] = j;
		return index;
	}

}
